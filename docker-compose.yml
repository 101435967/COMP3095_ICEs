#------------------------------------------------------
#1. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d
#    -- this command will start the containers in detached mode without rebuilding the images (if they exist)
#
#2. docker-compose -p microservices-comp3095-ecommerce -f docker-compose.yml up -d --build
#    --this command forces to rebuild the images even if they exist
#-------------------------------------------------------



services:

  product-service:
    image: product-service
    ports:
      - "8084:8084"
    build:
      context: ./product-service
      dockerfile: ./Dockerfile
    container_name: product-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATA_MONGODB_URI: mongodb://admin:password@mongodb:27017
    depends_on:
      - mongodb
    networks:
      - spring

  mongodb:
    image: mongo:latest

    ports:
      - "27018:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
    volumes:
      - ./data/mongo/products:/data/db
      - ./init/mongo/docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    command: mongod -auth
    container_name: mongodb
    networks:
       - spring

  mongo-express:
    image: mongo-express:latest
    ports:
      - '8082:8081'
    environment:
      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
      - ME_CONFIG_MONGODB_SERVER=mongodb
    container_name: mongo-express
    restart: unless-stopped
    depends_on:
      - mongodb
    networks:
       - spring

  inventory-service:
    image: inventory-service
    ports:
      - "8087:8087"
    build:
      context: ./inventory-service
      dockerfile: ./Dockerfile
    container_name: inventory-service
    environment:
      SPRING_PROFILES_ACTIVE: docker
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres:5432/inventory-service
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: password
    depends_on:
      - postgres
    networks:
      - spring

  postgres:
      image: postgres
      ports:
        - "5433:5432"
      container_name: postgres-inventory
      environment:
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=password
        - POSTGRES_DB=inventory-service
      volumes:
        - ./data/inventory:/var/lib/postgresql/data
        - ./init/inventory/init.sql:/docker-entrypoint-initdb.d/init.sql
      networks:
        - spring

  order-service:
      image: order-service
      ports:
        - "8088:8088"
      build:
        context: ./order-service
        dockerfile: ./Dockerfile
      container_name: order-service
      environment:
        SPRING_PROFILES_ACTIVE: docker
        SPRING_DATASOURCE_URL: jdbc:postgresql://postgres-order:5432/order-service
        SPRING_DATASOURCE_USERNAME: admin
        SPRING_DATASOURCE_PASSWORD: password
      depends_on:
        - postgres-order
      networks:
        - spring

  postgres-order:
      image: postgres
      ports:
        - "5432:5432"
      container_name: postgres-order
      environment:
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=password
      volumes:
        - ./data/order:/var/lib/postgresql/data
        - ./init/order/init.sql:/docker-entrypoint-initdb.d/init.sql
      networks:
        - spring

  pgadmin:
      image: dpage/pgadmin4
      ports:
        - "8888:80"
      container_name: pgadmin
      environment:
        - PGADMIN_DEFAULT_EMAIL=user@domain.ca
        - PGADMIN_DEFAULT_PASSWORD=password
      networks:
        - spring

  api-gateway:
      image: api-gateway
      ports:
        - "8089:8089"
      build:
        context: ./api-gateway
        dockerfile: ./Dockerfile
      container_name: api-gateway
      environment:
        SPRING_PROFILES_ACTIVE: docker
      networks:
        - spring

  keycloak:
      container_name: keycloak
      hostname: keycloak
      image: quay.io/keycloak/keycloak:24.0.1
      command: [ "start-dev","--import-realm" ]
      environment:
        DB_VENDOR: postgres
        DB_ADDR: postgres-keycloak
        DB_DATABASE: keycloak
        DB_USER: admin
        DB_PASSWORD: password
        KEYCLOAK_ADMIN: admin
        KEYCLOAK_ADMIN_PASSWORD: password
        ROOT_LOGLEVEL: DEBUG
        JBOSS_LOG_MANAGER_ROOT_LOGGER: DEBUG,stdout,FILE
      ports:
        - "8080:8080"
      volumes:
        - ./realms/:/opt/keycloak/data/import
      depends_on:
        - postgres-keycloak
      networks:
        - spring

  postgres-keycloak:
      image: postgres
      ports:
        - "5429:5432"
      container_name: postgres-keycloak
      environment:
        - POSTGRES_DB=keycloak
        - POSTGRES_USER=admin
        - POSTGRES_PASSWORD=password
        - PGDATA=/data/postgres
      volumes:
        - ./data/keycloak:/var/lib/postgresql/data

volumes:
  mongo-db:
    driver: local
  postgres:
    driver: local
  postgres-order:
    driver: local
  postgres-keycloak:
    driver: local

networks:
  spring:
    driver: bridge